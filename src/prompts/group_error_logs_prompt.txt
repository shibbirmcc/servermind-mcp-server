ðŸš¨ WORKFLOW DISCIPLINE - CRITICAL INSTRUCTIONS
- You are in Step 4 of 9 in an automated debugging workflow
- Your ONLY job is to group logs and extract IDs - nothing more
- DO NOT analyze root causes, provide solutions, or jump to conclusions
- DO NOT use attempt_completion or other tools
- MUST return the exact JSON plan structure specified in Step 4
- Trust the process - detailed analysis happens in later steps

ðŸ“‹ WORKFLOW CONTEXT:
- Previous steps: Index discovery â†’ Error search â†’ Log grouping (YOU ARE HERE)
- Next steps: Trace search â†’ Narrative analysis â†’ Root cause â†’ Tickets
- Your response automatically triggers splunk_trace_search_by_ids

You are given raw ERROR log messages as strings.

## Input Data

$INPUT_LOGS

## Your Task

Analyze the above log data to group similar error messages and extract one representative trace ID per group for trace fetching.

Step 1 â€” Group error logs by fuzzy matching error messages
- Focus on the actual error message content (not the whole log object)
- Use semantic similarity to cluster similar errors together
- Natural grouping - could be 1 group or many groups, whatever makes sense
- Group messages that describe the same type of error, even if details differ

Step 2 â€” Extract one representative ID per group
- Look for these ID patterns in each group's logs (in priority order):
  * trace_id, traceId, traceID
  * span_id, spanId, parent_span_id, parentSpanId  
  * correlation_id, correlationId, request_id, requestId
  * sidecarID, processId, sessionId, transactionId
  * Any hex string (32 chars for trace_id, 16 chars for span_id)
  * UUID format patterns (8-4-4-4-12 format)
  * Any field ending in "_id" or "Id"
- Pick one representative ID from the available IDs in each group
- If no traditional trace IDs exist, use alternative correlation IDs (like sidecarID)
- If no IDs are found at all, use a descriptive identifier based on the error pattern
- CRITICAL: Every group MUST have a chosen identifier for correlation

Step 3 â€” Output a JSON object with field name and trace IDs
Generate a JSON object with the field type you used and the array of IDs:
{
  "field_name": "trace_id",
  "ids": ["abc123def456789", "xyz789ghi012345", "def456ghi789abc"]
}

Use the most appropriate field_name based on what you found:
- "trace_id" for trace_id, traceId, traceID patterns
- "correlation_id" for correlation_id, correlationId patterns  
- "request_id" for request_id, requestId patterns
- "span_id" for span_id, spanId patterns
- "generic_id" for other ID patterns or mixed types

Step 4 â€” Return complete plan structure
Return this complete plan structure, replacing <EXTRACTED_IDS> with your actual JSON object from Step 3:

$WORKFLOW_TEMPLATE

ðŸ”´ CRITICAL INSTRUCTIONS - NO EXCEPTIONS:
- Replace <EXTRACTED_IDS> with your complete JSON object from Step 3
- Every group must produce a valid identifier for correlation
- Output must be valid JSON format matching the template exactly
- This response triggers the next automated step in the workflow
- FAILURE TO FOLLOW THIS FORMAT BREAKS THE ENTIRE DEBUGGING CHAIN
- DO NOT provide analysis, conclusions, or use other tools
- ONLY return the JSON plan structure as specified above
